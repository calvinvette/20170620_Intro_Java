Calvin Vette,RCHE, JCEA, CSM, +1 248 894-4913 Textcalvin.vette@triveratech.comFirst NameTitle/JobExperience (esp programming)ExpectationsWhy Java?     8:30 – 4:30 10:15 (10-15 min)12:00 – 1:00 Lunch 2:45 (10-15 min)4:30 Break until about 10:101995 Java 1.0 (4MB)1997 Java 1.1 (5MB)1999 Java 1.2 (16MB)i18n = internationalizationl10n = localizationa11y = accessibilityEncapsulation – Data Hiding (Data Protection)Ensure Business & Data Integrity is applied consistentlyDate:	Hours, Minutes, Seconds, Months, Date (of month), Year, TimeZoneOffsetLeap Year	Every Year has 365 days		Ex. Ev 4 years = 366			Ex. Ev 100 years = 365				Ex Ev 400 years = 366Class =~ Table (defines structure – blueprint)Object (instance of a class) =~ row of a table
int x


c
c = c + 1
=~ c++


harryBDay.setMonth(7); // 0-based - 6 for July
harryBDay.setDate(31); // 1-based
harryBDay.setYear(1980); // 1900-based

timestamp = # milliseconds since Epoch (Jan 1, 1970@Midnight UTC/GMT)



String's length() is a method
Array's length is a property
length will always give you a 1-s based number
Items in the array are all 0-based.


// Create an array to hold 10 customers
// Arrays are FIXED in length (but not content)
Customer[] customers = new Customer[10];

// Customers will be numbered 0-9.
// customers.length will be 10.

for (int i = 0; i < customers.length; i++) {
	customers[i] = new Customer(...);
}

customers[customers.length - 1]


Window -> Preferences -> Java -> Editor -> Templates
	sysout -> Edit -> change name to "sop"
	The popup asks if you want a copy - say yes.
	OK to exit.



Windows->Preferences
	General->Appearances->Colors and Fonts->Basic->Text Font


https://github.com/calvinvette/20170620_Intro_Java



Encapsulation - protection/Data Hiding
Inheritance - a class extends another class
Overloading - 	
	Operator - 5 + 5 (add), 5.0 + 5.0 (fpadd), "foo" + "bar" 
	Method - multiple methods with same name and different signature
		signature: number, order, and type of arguments
		setDate(int month, int day, int year)
		setDate(int month, int day) // assumes current year
Constructors - Initializing methods, called after "new"
Chaining Methods - one method calls another, typically in overloading
	with CTORs, must be done on first line of code with this(...) or super(...)
Overriding - replacing a parent (or super) method in your child/base class
	Can also call super.method() in child to still invoke parent version too
	e.g. Whale's breath checks for underwater-ness first, then calls super.breath()
Polymorphism - Many forms
	Overloading
	Overriding
	Inheritance
	"Do the right thing based on context" - 
	Cat knows that it's a cat even if you refer to it as a mammal

	Mammal m = new Cat();
	m.breath(); // generic mammalian method
	if (m instanceof Cat) {
		Cat c = (Cat) m;
		c.meow(); // the c variable is of Cat type - it knows it can "meow"
	} 

	Upcasting - Cat extends Mammal - always safe to "generalize" a cat as a 
		mammal
	Downcasting - A given mammal may or may not be a Cat - check first with
		instanceof before casting

Exceptions - try/catch blocks
	




Package is a "namespace" + a directory structure
CLASSPATH includes directories(or jar or zip files) that have the folder that
	contains the namespace directory structure

	src/com.trivera.example (package name == com.trivera.example)
	src/	
		com/
			trivera/
				example/
					Vehicle.java
					Vehicle.class	(compiled version)

	Vehicle.java's first line of code is "package com.trivera.example;"

	Make "src" an entry in our CLASSPATH

	Eclipse compiles into a parallel directory structure bin/


Access Modifiers:

private - only accessible within this class
(package) - default - accessible to anything within this package
	(package = directory)
protected - like package, but also accessible to derivatives
	outside of the package
public - any code can access this


		com.trivera
			Customer.java				MainApp.java
			private int socialSecurityNumber
			public int getSSN() {
				// Authn & Authz to verify
				// caller can see this!
			}
			setMaskingFilter(String filter) {
				// take a string to mask
				// the unsee-able portions of SSN
				// Default to "*" blocking
			}
			protected setDefaultAuthMode(String authMode) {
				// Set up authentication using authMode
			}



		com.jpmorgan/
			MyApp.java				Customer.java
								  extends
								com.trivera.Customer
									adds BankAccount
	


https://www.javacodegeeks.com/2016/06/java-certification-cert-not-cert.html

https://en.wikipedia.org/wiki/Oracle_Certification_Program
https://upload.wikimedia.org/wikipedia/commons/3/33/Java_Certification_Path.gif


abstract != concrete
abstract class cannot be instantiated
	(Must subclass to instantiate a subclass)
If any method in any class is marked as abstract
	the whole class MUST be marked abstract




An interface is a pure abstract class
	Only method signatures and CONSTANTS (static final)
	Used for "plug and play"

	Used in TDD - a service has an interface that implements
	It's the contract between a service provider and service consumer

	Code a web app to the interface
		Create a "mock" or "stub" implementation of that interface
		Develop against the Mock
		Test the WebUI against the Mock
	Code a service implementation of that interface (Mainframe/DB/2)
		Mock gets replaced in production by the real service implementation
	Later, create an alternative JEE Service implementation
		If it implements the same interface, the WebUI shouldn't notice
		or have to change to use the new "upgraded" JEE service.






Connect to DB
	** Can't Connect: DB not available
	** Can't connect: wrong username or password

Execute SQL query
	** No Results

Parse Results
	Malformed Data in DB

Dump results to file (tab-delimited)
	Can't write for security reasons
	Disk full




ideal/happy path

exception/unhappy path
	one handler for each scenario

public void dumpAllCustomers() throws BadUserNamePasswordException {
  try {
	Connection conn = DriverManager.getConnection(...)
	Statement stmt = conn.createStatement()
	ResultSet rs = stmt.executeQuery("SELECT * FROM ...")
	PrintWriter out = new PrintWriter("...");
	while (rs.next()) {
		Long customerId = rs.getLong(...);
		String firtName = rs.getString(...);
		String lastName = rs.getString(...);
		String phoneNumber = rs.getString(...);
		String email = rs.getString(...);
		Customer c = new Customer(customerId, firstName, lastName, phoneNumber, email);
		out.println(c);
	}
  } catch (FileNotFoundException e) {
	// specific handler for file not found, it's a subtype IOException
  } catch (IOException e) {
	// more general IO problems - security, disk full
  } catch (SQLException e) {
	// Any type of issue with JDBC connections/queries/etc.
	// if userId/password issue, "re-throw" or (duck) the exception
	throw new BadUserNamePasswordException(e);
  } catch (Exception e) { // general exception handler

  } finally {
    // execute this whether the ideal path worked or an exception is caught
    // Cleanup method
	try {
	  rs.close();
  	  stmt.close();
	  conn.close();
	} catch (SQLException e) { ... }
	try {
	  out.flush();
	  out.close();
	catch (IOException e) { ... }
  }
} 


MainConsole
	public static void main(String[] args) {
		boolean notLoggedIn = true;
		while (notLoggedIn) {
			try {
				dumpAllCustomers();
				notLoggedIn = false;
			} catch (BadUserNamePasswordException e) {
				sop(e.getMessage());
				notLoggedIn = true;
			}
		}
	}


public class BadUserNamePasswordException extends Exception {
	// CTORs from super class
}

Exceptions are either Checked or Unchecked
	Checked Exception MUST be dealt with by the calling code - compiler error otherwise
	Unchecked Exception is OPTIONALly try/catched by calling code
		BadUserNamePasswordException extends RuntimeException


SwingGUI
WebApp



sop("Continue on...")



java.lang.Integer =~ int
java.lang.Float =~ float
java.lang.Double =~ double



https://github.com/calvinvette/20170620_Intro_Java



Collections (Hashtables, Vectors, LinkedLists, Sets, etc.)
JDBC
File I/O
TDD

Optional (Time Allowing)
Threads
MDE (Model-Driven Engineering) (JBoss Forge)



Lists
	Lists are great if you're modifying/re-sorting/adding/moving list items
	Items are ordered and reference-able by index position
	Arrays will be better if you're not
	LinkedLists can be singly or doubly linked
		(next pointer, previous pointer)
		Re-orders are linear and don't impact performance
	Vectors are thread-safe and use Arrays internally with System.arrayCopy
		Think of it as a "growable array"
		Re-orders/insertions won't be as good as LinkedLists
		Better performance overall for reads
		Can be performance-tweaked with capacity and increment hints
	ArrayLists are the same as Vectors but without thread safety
		When in doubt, use a Vector

Maps
	Also known as Hashtables, Dictionaries, or Associative Arrays
	Key/Value pairs
	Keys use their internal hashcode(), are simple, and typically
		reconstructable from easily obtainable data (lastName,firstName)
		Must be unique
	TreeMap can be sorted with a Comparable or a Comparator

Sets
	Unique values guaranteed, uses hashcode() internally for the 
		key of a manually managed hash map
		No guaranteed ordering, no index position
		Can be sorted using a TreeSet and a Comparable or a Comparator


Common Mandatory (Checked) Exceptions:

	Exception
	IOException
		FileNotFound
		EOFException
	SQLException


JDBC
	CLI - Call-Level-Interface for Database Access based on ODBC
	Set of 9-ish standard steps to connect, fire off queries, and process result sets

	Use Factory Pattern to avoid hard-wiring a driver
	Use user input, files, ResourceBundle to store conn info, user, password info
		maybe even the SQL itself

	Java Persistence Architecture builds on top of JDBC and does much of this for you.

	Most of java.sql (JDBC package) are interfaces and abstract classes

	//Connection conn = new OracleDBConnection(...)
	// Make sure Oracle JDBC jar file is in my CLASSPATH
	Connection conn = DriverManager.getConnection(jdbcUrl, user, password)
	Statement stmt = conn.createStatement();
	stmt.execute*
		executeQuery(...) - for SELECT statements, returns a ResultSet
		execute(...) - generic, can be used for anything
		executeUpdate(...) - for INSERT, UPDATEs, DELETE - returns #rows affected
		executeBatch(...) - for performance bulk queries

	ResultSet rs = stmt.executeQuery("SELECT * FROM Customer WHERE ...");
		rs may be 0 length
		rs points a cursor to point BEFORE the first record
	rs.next() - return a boolean true if there is at least one more record to process
		moves cursor forward when called
	while (rs.next()) {
		
	}

	rs.get* functions pull out individual fields, arg is index position or field name
		rs.getString(...)
		rs.getLong(...)
		rs.getDate(...)

		rs.getString("firstName") or rs.getString(1) will get first column

		ANSI SQL counts from 1, NOT 0

		Typically we'll convert a row into a business object like Customer
		add it to a local map or list or save in a file.


	Close rs, stmt, conn
	Try/Catch-athon all over the place


File I/O

System.out.println
System.out = console output
System.err = console error output
System.in = keyboard input

FileWriter - open a (2-byte) character-based file for writing
FileOutputStream - open a binary file for writing

FileReader
FileInputStream




Test-Driven Development - TDD

	Test as you code
	Cost of a bug expands exponentially as time goes on

Thread
	Main thread
		spawns utility thread as background
		threads can share memory with the main

















	